/// Select all children from the first to **n**
/// @group with arguments
/// @name First
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin first($num) {
  @at-root{
    %content { @content; }
  }

  @for $i from 0 to $num + 1 {
    &:nth-child(#{$i}) {
      @extend %content;
    }
  }
}

/// Select all children from the last to **n**
/// @group with arguments
/// @name last
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin last($num) {
  @for $i from 0 to $num + 1 {
    &:nth-last-child(#{$i}) {
      @content
    }
  }
}

/// Select all children after the first to **n**
/// @group with arguments
/// @name after-first
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin after-first($num) {
  &:nth-child(n+#{$num + 1}) {
    @content
  }
}

/// Select all children before **n** from the last
/// @group with arguments
/// @name from-end
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin from-end($num) {
  &:nth-last-child(#{$num}) {
   @content
  }
}

/// Select all children between **first** and **last**
/// @group with arguments
/// @name between
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin between($first,$last) {
  &:nth-child(n+#{$first}):nth-child(-n+#{$last}) {
    @content
  }
}

/// Select all even children between **first** and **last**
/// @group with arguments
/// @name pair-between
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin pair-between($first,$last) {
  &:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content
  }
}

/// Select all odd children between **first** and **last**
/// @group with arguments
/// @name impair-between
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin impair-between($first,$last) {
  &:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content
  }
}

/// Select all **n** children between **first** and **last**
/// @group with arguments
/// @name n-between
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin n-between($num,$first,$last) {
  &:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content
  }
}


/// Select all children but **n**
/// @group with arguments
/// @name all-but
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin all-but($num) {
  &:not(:nth-child(#{$num})) {
    @content
  }
}

/// Select children each **n**
/// @group with arguments
/// @name each
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
/// @alias every
@mixin each($num) {
  &:nth-child(#{$num}n) {
    @content
  }
}

/// Select children each **n**
/// @group with arguments
/// @name every
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
/// @alias each
@mixin every($num) {
  &:nth-child(#{$num}n) {
    @content
  }
}

/// Select the **n** child from the start and the **n** child from the last
/// @group with arguments
/// @name from-first-last
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin from-first-last($num) {
  &:nth-child(#{$num}),
  &:nth-last-child(#{$num}) {
    @content
  }
}


/// Select the item in the middle of **n** child. Only works with odd number chain.
/// @group with arguments
/// @name middle
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin middle($num) {
  &:nth-child(#{round($num/2)}){
    @content
  }
}


/// Select all children between the **n** first and the **n** last
/// @group with arguments
/// @name all-but-first-last
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - id of the child
/// @require $num - Cannot work with an empty argument
@mixin all-but-first-last($num) {
  &:nth-child(n+#{$num}):nth-last-child(n+#{$num}){
    @content
  }
}


/// This I/O mixin will only select the first of **x** items. It will not work if there is not as much as item as you set in **$limit**
/// @name first-of
/// @group I/O
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin first-of($limit) {
  &:nth-last-child(#{$limit}):first-child {
   @content
  }
}

/// This I/O mixin will only select the last of **x** items. It will not work if there is not as much as item as you set in **$limit**
/// @name last-of
/// @group I/O
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin last-of($limit) {
  &:nth-of-type(#{$limit}):nth-last-of-type(1){
    @content
  }
}

///  Select all even children
/// @group no argumants
/// @name pair()
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin pair() {
  &:nth-child(even) {
    @content
  }
}

///  Select all even children
/// @group no argumants
/// @name even()
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin even(){
  &:nth-child(even) {
    @content
  }
}

/// Select all odd children
/// @group no argumants
/// @name impair
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin impair() {
  &:nth-child(odd) {
    @content
  }
}

/// Select all odd children
/// @group no argumants
/// @name odd
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @alias impair
@mixin odd(){
  &:nth-child(odd) {
    @content
  }
}

/// Select only the first and last child
/// @group no argumants
/// @name first-last
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin first-last() {
  &:first-child,
  &:last-child {
    @content
  }
}

/// Will only select the child if it's unique
/// @group no argumants
/// @name unique
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin unique() {
  &:only-child {
    @content
  }
}

/// Will only select the child if it's unique
/// @group no argumants
/// @name only()
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @alias unique
@mixin only() {
  &:only-child {
    @content
  }
}

/// Will only select children if they are not unique. Meaning if there is at least 2 children, the style is applied.
/// @group no argumants
/// @name not-unique
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
@mixin not-unique() {
  &:not(:only-child) {
    @content
  }
}


/// This mixin is used to automatically sort z-index in numerical order. But it can also sort them
/// in anti-numerical order, depending the parameters you use.
/// @group using functions
/// @name child-index
/// @access public
/// @content [ Write the style you want to apply to the childrent, and it will be added within the @content directive]
/// @param {numeric} $num - Number of children
/// @param {string} $direction [forward] - Direction of the sort
/// @param {numeric} $index [0] - Index of the sorting
@mixin child-index($num, $direction: 'forward', $index: 0) {
  @for $i from 1 through $num {
    @if $direction == 'forward' {
      &:nth-child(#{$i}) {
      z-index: orderIndex($i, $index);
      @content;
    }

    }
  @if $direction == 'backward' {
      &:nth-last-child(#{$i}) {
        z-index: orderIndex($i, $index);
        @content;
      }
    }
  }
}

/// Used by the child-index mixin. It will returned the proper sorted numbers depending on the index value.
/// @name orderIndex
/// @access public
/// @param {numeric} $num - Number of children
/// @param {numeric} $index [0] - Index of the sorting
@function orderIndex($i, $index){
  $i:$index + $i;
  @return $i
}
